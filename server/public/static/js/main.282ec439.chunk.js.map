{"version":3,"sources":["comp/newpet.js","comp/findpet.js","App.js","serviceWorker.js","index.js"],"names":["Newpet","state","species","name","age","react_default","a","createElement","className","type","placeholder","value","this","onChange","handleChange","bind","onClick","fetcher","ev","setState","Object","defineProperty","target","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","res","json","Component","Findpet","action","App","allPets","BrowserRouter","Route","path","component","newpet","findpet","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.282ec439.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Newpet extends Component {\r\n    state={\r\n        species:\"\",\r\n        name:\"\",\r\n        age:\"\"\r\n    }\r\n  render() {\r\n    return (\r\n      <div className=\"new\"><br/><br/><br/>\r\n      <h4>Insert new pet to database</h4><br/>\r\n        <input type='text' placeholder='Enter Species' name='species' value={this.state.species} onChange={this.handleChange.bind(this)}></input><br/>\r\n        <input type='text' placeholder='Enter pet name' name='name' value={this.state.name} onChange={this.handleChange.bind(this)}></input><br/>\r\n        <input type='text' placeholder='Enter pet age' name='age' value={this.state.age} onChange={this.handleChange.bind(this)}></input><br/><br/>\r\n        <input type=\"submit\" onClick={this.fetcher.bind(this)} value=\"Submit pet\"></input>\r\n      </div>\r\n    );\r\n  }\r\n  handleChange(ev){\r\n      this.setState({[ev.target.name]:ev.target.value})\r\n  }\r\n\r\n  async fetcher(){\r\n      var res = await fetch('http://localhost:3000/newpet', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(this.state)\r\n      });\r\n      const content = await res.json();\r\n  }\r\n}\r\n\r\nexport default Newpet;\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Findpet extends Component {\r\n    state = {\r\n        species: \"\",\r\n        name: \"\",\r\n        age: \"\"\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"new\"><br /><br /><br />\r\n                <form method='post' action='\\findpet'>\r\n                    <h4>Find a pet in the database</h4><br />\r\n                    <input type='text' placeholder='Enter Species' name='species' value={this.state.species} onChange={this.handleChange.bind(this)}></input><br /><br />\r\n                    {/* <input type='text' placeholder='Enter pet name' name='name' value={this.state.name} onChange={this.handleChange.bind(this)}></input><br/>\r\n        <input type='text' placeholder='Enter pet age' name='age' value={this.state.age} onChange={this.handleChange.bind(this)}></input><br/><br/> */}\r\n                    <input type=\"submit\" value=\"Submit pet\"></input>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n    handleChange(ev) {\r\n        this.setState({ [ev.target.name]: ev.target.value })\r\n    }\r\n\r\n    async fetcher() {\r\n        var res = await fetch('http://localhost:3000/findpet', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        });\r\n        const content = await res.json();\r\n    }\r\n}\r\n\r\nexport default Findpet;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Newpet from './comp/newpet';\nimport Findpet from './comp/findpet';\n\nclass App extends Component {\n  state = { allPets: \"\" }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n        <Route path=\"/newpet\" component={Newpet} />\n        <Newpet/>\n        <Findpet/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}